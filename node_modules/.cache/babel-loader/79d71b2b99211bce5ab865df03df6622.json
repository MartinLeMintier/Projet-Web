{"ast":null,"code":"/**\n * Copyright 2016-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDebugTool\n */\n'use strict';\n\nvar ReactInvalidSetStateWarningDevTool = require('./ReactInvalidSetStateWarningDevTool');\n\nvar warning = require('fbjs/lib/warning');\n\nvar eventHandlers = [];\nvar handlerDoesThrowForEvent = {};\n\nfunction emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {\n  if (process.env.NODE_ENV !== 'production') {\n    eventHandlers.forEach(function (handler) {\n      try {\n        if (handler[handlerFunctionName]) {\n          handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);\n        }\n      } catch (e) {\n        process.env.NODE_ENV !== 'production' ? warning(!handlerDoesThrowForEvent[handlerFunctionName], 'exception thrown by devtool while handling %s: %s', handlerFunctionName, e.message) : void 0;\n        handlerDoesThrowForEvent[handlerFunctionName] = true;\n      }\n    });\n  }\n}\n\nvar ReactDebugTool = {\n  addDevtool: function addDevtool(devtool) {\n    eventHandlers.push(devtool);\n  },\n  removeDevtool: function removeDevtool(devtool) {\n    for (var i = 0; i < eventHandlers.length; i++) {\n      if (eventHandlers[i] === devtool) {\n        eventHandlers.splice(i, 1);\n        i--;\n      }\n    }\n  },\n  onBeginProcessingChildContext: function onBeginProcessingChildContext() {\n    emitEvent('onBeginProcessingChildContext');\n  },\n  onEndProcessingChildContext: function onEndProcessingChildContext() {\n    emitEvent('onEndProcessingChildContext');\n  },\n  onSetState: function onSetState() {\n    emitEvent('onSetState');\n  },\n  onMountRootComponent: function onMountRootComponent(internalInstance) {\n    emitEvent('onMountRootComponent', internalInstance);\n  },\n  onMountComponent: function onMountComponent(internalInstance) {\n    emitEvent('onMountComponent', internalInstance);\n  },\n  onUpdateComponent: function onUpdateComponent(internalInstance) {\n    emitEvent('onUpdateComponent', internalInstance);\n  },\n  onUnmountComponent: function onUnmountComponent(internalInstance) {\n    emitEvent('onUnmountComponent', internalInstance);\n  }\n};\nReactDebugTool.addDevtool(ReactInvalidSetStateWarningDevTool);\nmodule.exports = ReactDebugTool;","map":null,"metadata":{},"sourceType":"script"}